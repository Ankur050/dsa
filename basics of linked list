
   ------------------   -------------------  -----  SINGLY LINKED LIST ------------  ----------------- -------------  --------------------

#include<bits/stdc++.h>
using namespace std ;

class Node{
    public:
        int val;
        Node* next;
        
        Node(int data){
        
        val=data;
        next=NULL;
        }
    };
        // using pass by refernce 
        void InsertatHead(Node* &head,int val){
            Node* new_node=new Node(val);
            new_node->next=head;
            head=new_node;
        }
        void InsertatTail(Node* &head,int val){
            Node* new_node=new Node(val);
            Node* temp=head;
            while(temp->next!=NULL){
                temp=temp->next;
            }
            temp->next=new_node;
        }
        
        
         void InsertatPosition(Node* &head,int val,int pos){
            if(pos==0){
               InsertatHead(head,val);
                return ;
            }
            Node* new_node=new Node(val);
            Node* temp=head;
            int current_pos=0;
            while(current_pos!=pos-1){
                temp=temp->next;
                current_pos++;
            }
            // temp is pointing at node at pos-1
            new_node->next=temp->next;
            temp->next=new_node;
        }
        
        void updateAtposition(Node* &head,int pos,int val){
            Node* temp=head;
            int curr_pos=0;
            while(curr_pos!=pos){
                temp=temp->next;
                curr_pos++;
            }
            temp->val=val;
        }
        
        //--------   DELETION OF LINKED LIST head __ -------//
        
        void deleteathead(Node* &head){
            Node* temp=head;
            head=head->next;
            free(temp);
        }
        //----- deletion at the end of linked list------//
        void deleteattail(Node* &head){
            Node* second_last=head;
            while(second_last->next->next!=NULL){
                second_last=second_last->next;
            }
            Node* temp=second_last->next;
            second_last->next=NULL;
            free(temp);
        }
        //- deletion at the position of ll
        void deleteatposition(Node* &head,int pos){
            
            if(pos==0){
                deleteathead(head);
                return ;
            }
            int curr_pos=0;
            Node* prev=head;
            while(curr_pos!=pos-1){
                prev=prev->next;
                curr_pos++;
            }
            //prev is poiting at node
            Node* temp=prev->next;
            prev->next=prev->next->next;
            free(temp);
        }
        
        
        void display(Node* head){
            Node* temp=head;
            while(temp!=NULL){
                cout<<temp->val<<"->";
                temp=temp->next;
            }
            cout<<"NULL"<<endl;
        }


int main(){
    Node* head=NULL;
    InsertatHead(head,1);
    InsertatHead(head,1);
    InsertatHead(head,1);
    InsertatHead(head,1);
    display(head);
    InsertatHead(head,2);
    display(head);
    InsertatTail(head,4);
    display(head);
    InsertatPosition(head,7,1);
    display(head);
    updateAtposition(head,5,3);
    display(head);
    updateAtposition(head,5,8);
    display(head);
    deleteathead(head);
    display(head);
   deleteattail(head);
   display(head);
   deleteatposition(head,2);
   display(head);
}
------ -------------- ------------------------- --- ------------    END ----- ---------------- ------------------ ---------------- -------------- ------
------------------------------------------     DOUBLY LINKED LIST    --------- *********  ----------------- -------------------- ----------- -----------
#include<bits/stdc++.h>
using namespace std ;

class Node{
    public:
        int val;
        Node* prev;
        Node* next;
        
        Node(int data){
        
        val=data;
        prev=NULL;
        next=NULL;
    }
};



class doublylinkedlist{
    public:
        Node* head;
        Node* tail;
        
        doublylinkedlist(){
            head=NULL;
            tail=NULL;
        }
        
        
void display(){
    Node* temp=head;
    while(temp!=NULL){
        cout<<temp->val<<"<->";
        temp=temp->next;
    }
    cout<<endl;
}
        
        
        
        
        void insertathead(int val){
            Node* new_node= new Node(val);
            if(head==NULL){
           head=new_node;
           tail=new_node;
           return ;
            }
            new_node->next=head;
            head->prev=new_node;
            head=new_node;
            return ;
            
        }
        
        void insertatend(int val){
            Node* new_node= new Node(val);
            if(tail==NULL){
                head=new_node;
                tail=new_node;
                return;
            }
            tail->next=new_node;
            new_node->prev=tail;
            tail=new_node;
            return;
            
        }
        // assuming  pos is less than or equal to less than ll
        void insertatposition(int pos,int val){
            Node* temp=head;
            int count=1;
            while(count<(pos-1)){
                temp=temp->next;
                count++;
            }
            // temp will be pointing tot he node at(k-1)th index
            Node* new_node=new Node(val);
            new_node->next=temp->next;
            temp->next=new_node;
            new_node->prev=temp;
            new_node->next->prev=new_node;
            return;
        }
        
// -------*******-------********   DELETION AT THE END OF LINKED LIST --------*******------------**********

        void deleteatstart(){
            if(head==NULL){
                return ;
            }
            
            Node* temp=head;
            head=head->next;
            if(head==NULL){
                tail=NULL;
                    
            }else{
                head->prev=NULL;
            }
            free(temp);
            return ;
        }
        
     void deleteatend(){
         if(head==NULL){
             return;
         }
         Node* temp=tail;
         tail=tail->prev;
         if(tail==NULL){
             head==NULL;
         }else{
         
         tail->next=NULL;
     }
     free(temp);
     return;
     }   
      
     void deleteatposition(int pos){
         if(head==NULL){
             return;
         }
         Node* temp=head;
         int count=1;
         while(count<pos){
             temp=temp->next;
             count++;
         }
         // now temp is pointing at kth pos
         temp->prev->next=temp->next;
         temp->next->prev=temp->prev;
         free(temp);
     }  
        
        
};
int main(){
   
    doublylinkedlist dll;
    //dll.insertathead(1);
    //dll.display();
    //dll.insertathead(2);
    //dll.display();
    //dll.insertathead(5);
   // dll.display();
    dll.insertatend(8);
    dll.display();
    dll.insertatend(9);
    dll.display();
    dll.insertatend(8);
    dll.display();
    dll.insertatend(9);
    dll.display();
    dll.insertatposition(2,5);
    dll.display();
    dll.deleteatstart();
    dll.display();
    dll.deleteatend();
    dll.display();
    dll.deleteatposition(2);
    dll.display();
    return 0;
}



---- --------------- -------------------- ------------------ -END ------------------------------------- --        ---------------
